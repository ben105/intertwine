#!/usr/bin/env python2.7

from flask import Flask, request
import json
import re
import sys
import os
import psycopg2

from intertwine.friends import friends
from intertwine.accounts import register
from intertwine.accounts import search
from intertwine.accounts import accounts
from intertwine.activity import events
from intertwine.activity import comments
from intertwine.activity import activity
from intertwine import context


enableLogging = True
if len(sys.argv) > 1:
	arg = sys.argv[1]
	if arg == '-v' or arg == '--verbose':
		enableLogging = False

if enableLogging:
	from intertwine import log_manager
	log_manager.EnableLogging()

app = Flask(__name__)

db_server = 'intertwine.cntms98hv39g.us-west-2.rds.amazonaws.com'
conn = None
try:
	conn = psycopg2.connect("dbname=intertwine host=%s user=intertwine password=intertwine" % db_server)
	conn.autocommit = True
except Exception as exc:
	logging.error('exception raised trying to connect to database\n%s', str(exc))
	quit()

def create_context(request):
	return context.SecurityContext(request, conn.cursor())


####### Comments ########

@app.route('/api/v1/comment/<int:event_id>', methods=['GET'])
def comment_get(event_id):
	ctx = create_context(request)
	resp = comments.get_comments(ctx, event_id)
	return json.dumps(resp)

@app.route('/api/v1/comment', methods=['POST'])
def comment_handler():
	ctx = create_context(request)
	# Get all the information from the POST body.
	body = json.loads(request.data)
	comment = body["comment"]
	event_id = body["event_id"]
	title = body["title"]
	resp = comments.comment(ctx, event_id, title, comment)
	return json.dumps(resp)



####### Activities ########

@app.route('/api/v1/activity', methods=['GET'])
def activities():
	ctx = create_context(request)
	print('getting activities')
	resp = activity.get_activity(ctx)
	return json.dumps(resp)

@app.route('/api/v1/events', methods=['GET', 'POST', 'DELETE'])
def event_api():
	ctx = create_context(request)

	# If user is asking for their activities.
	if request.method == "GET":
		resp = events.get_events(ctx)

	# Or if the user is creating an activity.
	elif request.method == "POST":
		body = json.loads(request.data)
		title = body.get('title')
		friends = body.get('friends')
		desc = body.get('description')
		resp = events.create(ctx, title, desc, friends)

	# Or if the user is deleting an activity.
	elif request.method == "DELETE":
		body = json.loads(request.data)
		event_id = body.get('event_id')
		resp = events.delete(ctx, event_id)

	return json.dumps(resp)



####### Device Token ########

@app.route('/api/v1/device_token', methods=['POST'])
def set_device_token():
	ctx = create_context(request)
	token_data = request.data
	return devices.add(token_data)



####### Searching ########

@app.route('/api/v1/search/<name>', methods=['GET'])
def search(name):
	ctx = create_context(request)
	resp = search.find(ctx, name)
	return json.dumps(resp)



####### Signing In ########

@app.route('/api/v1/signin', methods=['POST'])
def sign_in():
	"""This sign-in API should be used for accounts
	that are attempting to sign in with an email address.
	A Post form is required with this request.

	Keyword arguments:
	  email - the email address of the user signing in
	  password - the password associated with the email's account

	Returns:
	  Intertwine response block.
	"""
	ctx = create_context(request)
	email = request.form.get('email')
	password = request.form.get('password')
	return accounts.sign_in_email(ctx, email, password)

@app.route('/api/v1/adduser', methods=['POST'])
def add_user():
	ctx = create_context(request)
	# Errors dict to store all errors
	first = request.form.get('first')
	last = request.form.get('last')
	email = request.form.get('email')
	password = request.form.get('password')
	facebook_id = request.form.get('facebook_id')
	account_type = request.form.get('account_type')
	resp = register.register(ctx, first, last, email, password, facebook_id, account_type)
	return json.dumps(resp)


####### Friend Requests ########

@app.route('/api/v1/friend_requests', methods=['POST', 'GET'])
def friendrequests():
	"""Friend request can either be a get
	or a post. A get will simply return
	the results of all pending friend 
	requests, while a post will initiate
	a friend request.
	"""
	ctx = create_context(request)
	data = []
	if request.method == "GET":
		data = friends.get_pending_requests(ctx)
	elif request.method == "POST":
		requester_id = int(request.headers.get('user_id'))
		requestee_id = int(request.form.get('friend_id'))
		data = friends.send_request(ctx, requestee_id)
	return json.dumps(data)


@app.route('/api/v1/friends', methods=['POST'])
def get_friends():
	ctx = create_context(request)
	data = friends.get_friends(ctx)
	return json.dumps(data)

@app.route('/api/v1/friend_decline', methods=['POST'])
def deny():
	"""This API endpoint will either get the list
	of denied friends, with the GET method, or 
	deny a friend request with the POST method.
	"""
	ctx = create_context(request)
	friend_id = request.form.get('friend_id')
	resp = friends.accept_request(ctx, friend_id)
	return json.dumps(resp)

@app.route('/api/v1/send_friend_request', methods=['POST'])
def send_request():
	ctx = create_context(request)
	friend_id = int(request.form.get('friend_id'))
	data = friends.send_request(ctx, friend_id)
	return json.dumps(data)

@app.route('/api/v1/friend_accept', methods=['POST'])
def friend_accept():
	ctx = create_context(request)
	friend_id = request.form.get('friend_id')
	data = friends.accept_request(ctx, friend_id)
	# push.push_notification(cur, friend_id, "%d has accepted your friend request." % str(user_id))
	return json.dumps(data)

@app.route('/api/v1/facebook_friends', methods=['POST'])
def facebook_friends():
	ctx = create_context(request)
	facebook_friends = json.loads(request.data)
	data = friends.fb_friends(ctx, facebook_friends)
	return json.dumps(data)


if __name__ == "__main__":
	app.run(host='0.0.0.0')


